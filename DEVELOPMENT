11/19
This week, we focused on planning our project and setting up the files that we needed for our git repository.
We wrote up our team contract, decided on our project goals, and came up with a tentative timeline. In short, 
we want our project to use breadth-first traversal, implement Dijkstra’s shortest path algorithm, and landmark 
path in order to find the shortest airline routes from a source to a destination with a given transit airport.
We also added our Makefile.

11/28
During our second meeting on Zoom, we roughly created the classes we needed to implement.
Using the LiveShare extension on VSCode, we collaboratively did the following-
We imported the OpenFlights dataset into data.txt, where we have data for the airlines. We then worked on
readFromFile.cpp, where we implemented the file to vector method and then called the function in main.cpp.
We also created a test for this method in tests.cpp, where our test case passed. After, we implemented the 
extracting required info method and called the function in main. We also created a test case for this method
in tests.cpp. We were not able to get our test to pass for a while, but we were finally able to fix it and 
now the two methods in readFromFile.cpp work. Then we added the catch folder where created catch.hpp and 
catchmain.cpp. Our tests are located in a tests folder, and for each of our tests we use a small sample
size for the test. Then we moved our contracts pdfs to the contracts folder.

12/1
Using the LiveShare extension on VSCode again, during this meeting we began working on our shortest path
algorithm (Dijkstra’s). We created the header and cpp files, and began to consider how we would write our
methods. We decided we would be using a vector for all the flight data we imported earlier, and another
vector for the airport ids. We created a method in readFromFile.h which will extract the data in data.txt
and convert it to a vector. In our method for extracting the required info which we had created earlier,
we also pushed back all the airport id's. We also created a test case checking that the id's are unique.
For our shortest path algorithm, we are using a matrix where we store the vectors for our data. We then
created the constructor for our Graph class, where we initialized everything in the adjacency matrix to 
-1.